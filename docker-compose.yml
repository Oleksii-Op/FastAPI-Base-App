version: "3.5"

services:

  # PostgreSQL master
  pg:
    image: postgres
    secrets:
      - pg-pass
    environment:
      POSTGRES_DB: shop
      POSTGRES_USER: main
      POSTGRES_PASSWORD_FILE: /run/secrets/pg-pass
      # POSTGRES_PASSWORD: qwerty
    ports:
    # Use PGAdmin to access Postgres or via PGAdmin container to access psql.
      - "5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 15s
      timeout: 10s
      retries: 10
    networks:
      example-network:
        ipv4_address: 10.10.100.3

  nginx:
    restart: unless-stopped
    image: nginx:stable
    container_name: nginx
    ports:
     # Only HTTPS 443 port
     # - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl/:/etc/nginx/ssl/
    depends_on:
      - app
    logging:
      driver: "json-file"
      options:
        max-size: "100k"
        max-file: "1"
    networks:
      example-network:
        ipv4_address: 10.10.100.20

# Do not change "app" name as it is used by nginx
  app:
    build:
      context: ./fastapi-application
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: app
    # Use command below for the first run for running migrations
    # and creating a superuser. REMOVE AFTER THE FIRST RUN!
    command: bash -c "sleep 10 && poetry run alembic upgrade head && poetry run python main.py"
    environment:
      APP_CONFIG__DB__URL: postgresql+asyncpg://main:supersecret@10.10.100.3:5432/shop
      # APP_CONFIG__DB__ECHO=1 will output SQLAlchemy queries to logs,
      # set APP_CONFIG__DB__ECHO=0 for production to avoid unnecessary logs
      APP_CONFIG__DB__ECHO: 1
      APP_CONFIG__ACCESS_TOKEN__RESET_PASSWORD_TOKEN_SECRET: d270a3414c9c5de52047bf51914f51b46eb3518b62a7448d418d29406de81c2d
      APP_CONFIG__ACCESS_TOKEN__VERIFICATION_TOKEN_SECRET: f1cbb46d52e6ab73802d9021155a77d5828838730a08d407fd2c7ec59740dc3b
      # FastAPI superuser email and password
      APP_CONFIG__DEFAULT_EMAIL: "admin@admin.com"
      APP_CONFIG__DEFAULT_PASSWORD: "123"
    depends_on:
      pg:
        condition: service_started
    ports:
      - "8000"
    logging:
      driver: "json-file"
      options:
        max-file: "1"
        max-size: "100k"
    networks:
      example-network:
        ipv4_address: 10.10.100.4

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    container_name: prometheus
    ports:
      - "9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      example-network:
        ipv4_address: 10.10.100.5

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - ./grafana/config.monitoring
    networks:
      example-network:
        ipv4_address: 10.10.100.6

# Troubleshooting network problems
  network-analyzer:
    build:
      context: ./
      dockerfile: Dockerfile_netmonitor
    restart: unless-stopped
    container_name: network_analyzer
    networks:
      example-network:
        ipv4_address: 10.10.100.8

# Sends host's metrics to prometheus
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    networks:
      example-network:
        ipv4_address: 10.10.100.30

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    ports:
      - "8050:8000"
      - "9050:9000"
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      example-network:
        ipv4_address: 10.10.100.7

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      example-network:
        ipv4_address: 10.10.100.40

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: 'admin@example.com'
      PGADMIN_DEFAULT_PASSWORD: 'test_admin'
    ports:
      - "8020:80"
    volumes:
      - admin-data:/var/lib/pgadmin
    networks:
      example-network:
        ipv4_address: 10.10.100.55


networks:
  example-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.10.100.0/24

volumes:
  db-data:
  portainer_data:
  admin-data:

secrets:
  pg-pass:
    file: ./.db.env
