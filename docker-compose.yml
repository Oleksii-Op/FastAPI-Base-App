name: base_app

services:
  # PostgreSQL master
  pg:
    image: postgres
    container_name: pg
    secrets:
      - pg-pass
    environment:
      POSTGRES_DB: shop
      POSTGRES_USER: main
      POSTGRES_PASSWORD_FILE: /run/secrets/pg-pass
    ports:
    # Use PGAdmin to access Postgres tables.
      - "5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username=main --dbname=shop" ]
      interval: 15s
      timeout: 10s
      retries: 10
    depends_on:
      vector:
        condition: service_started
    networks:
      common-network:
        ipv4_address: 10.10.101.14

  redis:
    image: redis:7.4.1-bookworm
    container_name: redis
    depends_on:
      vector:
        condition: service_started
    ports:
      - "6379"
    networks:
      common-network:
        ipv4_address: 10.10.101.13

  #Backend proxy
  nginx:
    restart: unless-stopped
    image: nginx:stable
    container_name: nginx
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl/:/etc/nginx/ssl/
      - ./nginx/html/:/usr/share/nginx/html/
    depends_on:
      app:
        condition: service_started
    networks:
      common-network:
        ipv4_address: 10.10.101.12

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      tags:
        - "base-app/frontend:0.2"
    restart: unless-stopped
    container_name: frontend
    environment:
      VITE_API_BASE_URL: https://nginx:443/
    ports:
      - "3000"
    depends_on:
      nginx:
        condition: service_started
    networks:
      common-network:
        ipv4_address: 10.10.101.11

# Do not change "app" name as it is used by nginx configs
  app:
    build:
      context: ./fastapi-application
      dockerfile: Dockerfile
      tags:
        - "base-app/fastapi-backend:0.2"
    restart: unless-stopped
    container_name: app
    # Use command below for the first run for running migrations
    # and creating a superuser. REMOVE AFTER THE FIRST RUN!
    command: bash -c "sleep 10 && poetry run alembic upgrade head && poetry run python main.py"
    environment:
      APP_CONFIG__PROJECT_NAME: "TechHaven"
      APP_CONFIG__DB__URL: postgresql+asyncpg://main:supersecret@pg:5432/shop
      # APP_CONFIG__DB__ECHO=1 will output SQLAlchemy queries to logs,
      # set APP_CONFIG__DB__ECHO=0 for production to avoid unnecessary logs
      APP_CONFIG__DB__ECHO: 1
      APP_CONFIG__RELOAD__RELOAD: 1
      APP_CONFIG__ACCESS_TOKEN__RESET_PASSWORD_TOKEN_SECRET:
      APP_CONFIG__ACCESS_TOKEN__VERIFICATION_TOKEN_SECRET:
      # FastAPI superuser email and password
      APP_CONFIG__FIRSTSUPERUSER__EMAIL: "admin@admin.com"
      APP_CONFIG__FIRSTSUPERUSER__PASSWORD: "superuser"
      # CORS
      APP_CONFIG__FRONTEND_HOST: http://localhost:5050
      BACKEND_CORS_ORIGINS: prometheus
      # SMTP server settings
      # DO NOT CHANGE
      APP_CONFIG__SMTP_SERVICE__HOST: http://smtp
      APP_CONFIG__SMTP_SERVICE__PORT: 8050
      APP_CONFIG__SMTP_SERVICE__ENDPOINT: /send/verifytoken
      # DO NOT CHANGE
      APP_CONFIG__REDIS__URL: redis://redis:6379
    extra_hosts:
      - "redis=10.10.101.13"
    links:
      # Extra aliases for DNS
      - "pg:database"
    depends_on:
      pg:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: wget --no-verbose --tries=1 http://127.0.0.1:8000/utils/healthcheck || exit 1
    ports:
      - "8000"
    networks:
      common-network:
        ipv4_address: 10.10.101.10

  smtp:
    build:
      context: ./smtp_application
      dockerfile: ./Dockerfile
      tags:
        - "base-app/smtpserver:0.2"
    restart: on-failure
    container_name: smtp-server
    environment:
      GOOGLE__CREDENTIALS__EMAIL:
      GOOGLE__CREDENTIALS__PASSWORD:
      # DO NOT CHANGE
      GOOGLE__BACKEND_ALLOWED__IP_ADDRESS: 10.10.101.10
      GOOGLE__DOMAIN__DOMAIN_URL: https://{ip/domain}/
      # SMTP provide configs
      GOOGLE__SMTP__HOST: smtp.gmail.com
      GOOGLE__SMTP__PORT: 587
    healthcheck:
      test: wget --no-verbose --tries=1 http://127.0.0.1:8000/utils/healthcheck || exit 1
    depends_on:
      app:
        condition: service_started
    ports:
      - "8050"
    networks:
      common-network:
        ipv4_address: 10.10.101.9

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    container_name: prometheus
    depends_on:
      vector:
        condition: service_started
    ports:
      - "9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      common-network:
        ipv4_address: 10.10.101.8

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    user: root
    ports:
      # HTTPS
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_PROTOCOL=https
      - GF_SERVER_CERT_FILE=/etc/grafana/certs/grafana.crt
      - GF_SERVER_CERT_KEY=/etc/grafana/certs/grafana.key
      - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
    depends_on:
      vector:
        condition: service_started
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/certs:/etc/grafana/certs
    env_file:
      - ./grafana/config.monitoring
    networks:
      common-network:
        ipv4_address: 10.10.101.7

  clickhouse:
    image: clickhouse/clickhouse-server
    container_name: clickhouse
    volumes:
      - clickhouse-data:/var/lib/clickhouse/
      - ./clickhouse/:/docker-entrypoint-initdb.d/
    environment:
      CLICKHOUSE_DB: docker
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: password
    healthcheck:
      test: wget --no-verbose --tries=1 http://127.0.0.1:8123/ping || exit 1
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 5s
    ports:
      - "8123"
      - "9000"
    networks:
      common-network:
        ipv4_address: 10.10.101.6

  vector:
    image: timberio/vector:latest-alpine
    container_name: vector
    volumes:
      - ./vector/vector.yaml:/etc/vector/vector.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      common-network:
        ipv4_address: 10.10.101.5
    depends_on:
      clickhouse:
        condition: service_healthy

  # Sends host's metrics to prometheus
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
#    pid: host
    restart: unless-stopped
    depends_on:
      vector:
        condition: service_started
    volumes:
      - '/:/host:ro,rslave'
    networks:
      common-network:
        ipv4_address: 10.10.101.4

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080"
    depends_on:
      vector:
        condition: service_started
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      common-network:
        ipv4_address: 10.10.101.3

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    depends_on:
     pg:
       condition: service_started
    environment:
      PGADMIN_DEFAULT_EMAIL: 'admin@example.com'
      PGADMIN_DEFAULT_PASSWORD: 'test_admin'
    ports:
      - "8020:80"
    volumes:
      - admin-data:/var/lib/pgadmin
    networks:
      common-network:
        ipv4_address: 10.10.101.2

networks:
  common-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.10.101.0/27
          gateway: 10.10.101.1


volumes:
  db-data:
  admin-data:
  clickhouse-data:

secrets:
  pg-pass:
    file: ./.db.env