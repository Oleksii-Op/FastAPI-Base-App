user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    # Add HSTS header to all requests to force browsers to use HTTPS
    # Do "max-age=15768000; includeSubDomains" instead of just "max-age=..." if using subdomains
    add_header Strict-Transport-Security "max-age=15768000" always;

    ssl_protocols TLSv1.2 TLSv1.3; # Prefer 1.3, fallback to 1.2, reject all others
    ssl_prefer_server_ciphers on; # Use the server’s cipher preference, not the client’s

    # A list of all ciphers to permit, sorted most to least preferred. ! indicates ciphers to reject.
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:ECDHE-RSA-AES128-GCM-SHA256:AES256+EECDH:DHE-RSA-AES128-GCM-SHA256:AES256+EDH:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

    # Share the cache with all worker processes across cores; Name the cache SSL; Set to 5 min
    ssl_session_cache shared:SSL:5m;

    # The length of time a client can reuse session parameters
    ssl_session_timeout 1h;

    # Use our custom strong Diffie-Hellman for handshakes
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # Secure it with an elliptic curve algorithm instead of RSA
    ssl_ecdh_curve secp384r1;

    # Redirecting to port 443
    server {
        listen 80;
        server_tokens off;
        server_name _;
        # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.
        return 301 https://$host$request_uri;
    }

    server {
	    listen 443 ssl default_server;
	    http2 on;
	    server_name _;
	    server_tokens off;

	    ssl_certificate     /etc/nginx/ssl/server.crt;
	    ssl_certificate_key /etc/nginx/ssl/server.key;

	    client_max_body_size 32m;

        location / {
            proxy_pass http://frontend:3000/;
        }

	    location /api/ {
	        proxy_pass http://app:8000/api/;
 	        proxy_intercept_errors on;
            error_page 401 /401/401.html;
            error_page 403 /403/index.html;
            error_page 500 /500/index.html;
	    }

 	    location = /401/401.html {
             root /usr/share/nginx/html;
             internal;
        }
         location = /403/index.html {
             root /usr/share/nginx/html;
             internal;
         }
         location = /500/index.html {
             root /usr/share/nginx/html;
             internal;
         }
   }

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}
